win_width = Window.GetWidth();
win_height = Window.GetHeight();
ww_half = win_width / 2;
wh_half = win_height / 2;

sunheight_offset = 55;

sourceImage = Image ("xbmc_black.png");
newxbmc_width = sourceImage.GetWidth() / (win_width / ww_half);
newxbmc_height = sourceImage.GetHeight() / (win_height / wh_half);
scaledImage = sourceImage.Scale (newxbmc_width, newxbmc_height);
xbmcBlack.sprite = Sprite (scaledImage);
xbmcBlack.sprite.SetY (wh_half - (newxbmc_height / 2));
xbmcBlack.sprite.SetOpacity (1);

sourceImage = Image ("sun_glow.png");
newsun_width = sourceImage.GetWidth() / (win_width / ww_half);
newsun_height = sourceImage.GetHeight() / (win_height / wh_half);
scaledImage = sourceImage.Scale (newsun_width, newsun_height);
sunGlow.sprite = Sprite (scaledImage);
sunGlow.sprite.SetY (wh_half - (newxbmc_height / 2) + sunheight_offset);
sunGlow.sprite.SetOpacity (1);

xbmcBlack.start = 0;
xbmcBlack.end = 0.5;
xbmcBlack.animStart = 0;
xbmcBlack.animEnd = 1.0;
xbmcBlack.startPos = win_width - (ww_half / 2);
xbmcBlack.endPos = ww_half - (newxbmc_width / 2); 

sunGlow.start = 0;
sunGlow.end = 0.4;
sunGlow.animStart = 0;
sunGlow.animEnd = 1.0;
sunGlow.startPos = (ww_half / 2);
sunGlow.endPos = ww_half + (newxbmc_width / 2) - (newsun_width / 2);

fun remap (val, imin, imax, omin, omax) {
    return (((val - imin) / (imax - imin)) * (omax - omin)) + omin;
}

fun progress_callback (d, p) {

    p = (p * 100.0) / 15.0;

    if (p >= xbmcBlack.start && p <= xbmcBlack.end) {
        a = remap (p, xbmcBlack.start, xbmcBlack.end, 0, 1);
        xbmcBlack.sprite.SetOpacity (a);
    }
    if (p >= xbmcBlack.animStart && p <= xbmcBlack.animEnd) {
        a = remap (p, xbmcBlack.animStart, xbmcBlack.animEnd, 0, 1);
        b = xbmcBlack.startPos - ((xbmcBlack.startPos - xbmcBlack.endPos) * a);
        xbmcBlack.sprite.SetX (b);
    }
    if (p >= sunGlow.start && p <= sunGlow.end) {
        a = remap (p, sunGlow.start, sunGlow.end, 0, 1);
        sunGlow.sprite.SetOpacity (a);
    }
    if (p >= sunGlow.animStart && p <= sunGlow.animEnd) {
        a = remap (p, sunGlow.animStart, sunGlow.animEnd, 0, 1);
        b = sunGlow.startPos - ((sunGlow.startPos - sunGlow.endPos) * a);
        sunGlow.sprite.SetX (b);
    }
        
}
Plymouth.SetBootProgressFunction(progress_callback);
